/*
 * Inside.TestTask.MC1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Statistics
    /// </summary>
    [DataContract(Name = "Statistics")]
    public partial class Statistics : IEquatable<Statistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statistics" /> class.
        /// </summary>
        /// <param name="timeOfRunInMinutes">timeOfRunInMinutes.</param>
        /// <param name="hitCount">hitCount.</param>
        public Statistics(long timeOfRunInMinutes = default(long), int hitCount = default(int))
        {
            this.TimeOfRunInMinutes = timeOfRunInMinutes;
            this.HitCount = hitCount;
        }

        /// <summary>
        /// Gets or Sets TimeOfRunInMinutes
        /// </summary>
        [DataMember(Name = "timeOfRunInMinutes", EmitDefaultValue = false)]
        public long TimeOfRunInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets HitCount
        /// </summary>
        [DataMember(Name = "hitCount", EmitDefaultValue = false)]
        public int HitCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statistics {\n");
            sb.Append("  TimeOfRunInMinutes: ").Append(TimeOfRunInMinutes).Append("\n");
            sb.Append("  HitCount: ").Append(HitCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Statistics);
        }

        /// <summary>
        /// Returns true if Statistics instances are equal
        /// </summary>
        /// <param name="input">Instance of Statistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statistics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeOfRunInMinutes == input.TimeOfRunInMinutes ||
                    this.TimeOfRunInMinutes.Equals(input.TimeOfRunInMinutes)
                ) && 
                (
                    this.HitCount == input.HitCount ||
                    this.HitCount.Equals(input.HitCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.TimeOfRunInMinutes.GetHashCode();
                hashCode = hashCode * 59 + this.HitCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
